#!/usr/bin/env php
<?php

$workingPath = getcwd();

require __DIR__.'/../vendor/autoload.php';

$files = new Illuminate\Filesystem\Filesystem();

function line(string $code, int $tab = 0): string {
    return implode('', [PHP_EOL, str_repeat(' ', ($tab * 4)), $code]);
}

collect([
    'config',
    'config-stubs',
    'src/Illuminate/Foundation',
])->each(function ($path) use ($files, $workingPath) {
    $sourcePath = "{$workingPath}/vendor/laravel/framework/{$path}";
    $destinationPath = "{$workingPath}/{$path}";

    if ($files->isDirectory($destinationPath)) {
        $files->deleteDirectory($destinationPath);
    }

    $files->ensureDirectoryExists($destinationPath);

    $files->copyDirectory($sourcePath, $destinationPath);
});

// Configure `Illuminate\Foundation\Application` class
transform([
    'use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;'.PHP_EOL.'use Symfony\Component\HttpKernel\HttpKernelInterface;' => 'use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;',
    'class Application extends Container implements ApplicationContract, CachesConfiguration, CachesRoutes, HttpKernelInterface' => 'class Application extends Container implements ApplicationContract, CachesConfiguration, CachesRoutes',
    line('const VERSION = \''.Illuminate\Foundation\Application::VERSION.'\';', 1) => line('const VERSION = \''.Illuminate\Foundation\Application::VERSION.'\';', 1).PHP_EOL.PHP_EOL.'    /**
     * Copied from HttpKernelInterface, which this class no longer extends.
     *
     * @see \Symfony\Component\HttpKernel\HttpKernelInterface
     */
    const MAIN_REQUEST = 1;',
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/src/Illuminate/Foundation/Application.php"));

// Configure `Illuminate\Foundation\Bootstrap\HandleExceptions` class
transform([
    line('protected function shouldIgnoreDeprecationErrors()
    {', 1) => line('protected function shouldIgnoreDeprecationErrors()
    {
        if (static::$app[\'log\'] instanceof \Psr\Log\NullLogger) {
            return true;
        }
', 1),
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/src/Illuminate/Foundation/Bootstrap/HandleExceptions.php"));

// Configure `Illuminate\Foundation\Console\Kernel` class
transform([
    line('Str::after($file->getRealPath(), realpath(app_path()).DIRECTORY_SEPARATOR)', 3) => line('Str::after($file->getPathname(), app_path().DIRECTORY_SEPARATOR)', 3),
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/src/Illuminate/Foundation/Console/Kernel.php"));

// Configure `Illuminate\Foundation\Testing\Concerns\InteractsWithTestCaseLifecycle` class
transform([
    line('EncryptCookies::flushState();', 2) => PHP_EOL.line('if (class_exists(EncryptCookies::class)) {
            EncryptCookies::flushState();
        }'.PHP_EOL, 2),
    line('Factory::flushState();', 2) => PHP_EOL.line('if (class_exists(Factory::class)) {
            Factory::flushState();
        }'.PHP_EOL, 2),
    line('Migrator::withoutMigrations([]);', 2) => PHP_EOL.line('if (class_exists(Migrator::class)) {
            Migrator::withoutMigrations([]);
        }'.PHP_EOL, 2),
    line('Markdown::flushState();', 2) => PHP_EOL.line('if (class_exists(Markdown::class)) {
            Markdown::flushState();
        }'.PHP_EOL, 2),
    line('Queue::createPayloadUsing(null);', 2) => PHP_EOL.line('if (class_exists(Queue::class)) {
            Queue::createPayloadUsing(null);
        }'.PHP_EOL, 2),
    line('TrustProxies::flushState();', 2) => PHP_EOL.line('if (class_exists(TrustProxies::class)) {
            TrustProxies::flushState();
        }'.PHP_EOL, 2),
    line('TrustHosts::flushState();', 2) => PHP_EOL.line('if (class_exists(TrustHosts::class)) {
            TrustHosts::flushState();
        }'.PHP_EOL, 2),
    line('WorkCommand::flushState();', 2) => PHP_EOL.line('if (class_exists(WorkCommand::class)) {
            WorkCommand::flushState();
        }'.PHP_EOL, 2),
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/src/Illuminate/Foundation/Testing/Concerns/InteractsWithTestCaseLifecycle.php"));

// Configure `config/cache.php` file
transform([
    line("'default' => env('CACHE_STORE', 'database'),", 1) => line("'default' => env('CACHE_STORE', 'array'),", 1),
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/config/cache.php"));
